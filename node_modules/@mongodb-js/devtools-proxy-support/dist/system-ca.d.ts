import type { Options as SystemCAOptions } from 'system-ca';
import { X509Certificate } from 'crypto';
type NodeJSCAOption = string | Uint8Array | readonly (string | Uint8Array)[];
export declare function resetSystemCACache(systemCAOpts?: SystemCAOptions): void;
export declare function mergeCA(...args: (NodeJSCAOption | undefined)[]): string;
export type ParsedX509Cert = {
    pem: string;
    parsed: X509Certificate | null;
};
export declare function parseCACerts(ca: NodeJSCAOption, messages: string[]): ParsedX509Cert[];
export declare function removeCertificatesWithoutIssuer(ca: ParsedX509Cert[], messages: string[]): ParsedX509Cert[];
export declare function sortByExpirationDate(ca: ParsedX509Cert[]): ParsedX509Cert[];
export declare function tlsSupportsAllowPartialTrustChainFlag(): boolean;
export declare function systemCA(existingOptions?: {
    ca?: NodeJSCAOption;
    tlsCAFile?: string | null | undefined;
}, allowCertificatesWithoutIssuer?: boolean): Promise<{
    ca: string;
    systemCACount: number;
    asyncFallbackError?: Error;
    systemCertsError?: Error;
    messages: string[];
}>;
export {};
//# sourceMappingURL=system-ca.d.ts.map